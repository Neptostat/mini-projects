trigger:
  branches: { include: [ master ] }
  paths:    { include: [ selenium-soc/** ] }

pool:
  vmImage: 'ubuntu-latest'

variables:
  mavenCache: '$(Pipeline.Workspace)/.m2'
  socPom: '$(Build.SourcesDirectory)/selenium-soc/pom.xml'

steps:
  - checkout: self

  - script: |
      echo "Sources dir: $(Build.SourcesDirectory)"
      ls -la "$(Build.SourcesDirectory)/selenium-soc" || true
      test -f "$(socPom)" && echo "POM found: $(socPom)" || (echo "POM NOT FOUND" && exit 1)
    displayName: "Verify repository layout"

  - task: Cache@2
    displayName: 'Cache Maven repo'
    inputs:
      key: 'maven | "$(Agent.OS)" | **/pom.xml'
      path: '$(mavenCache)'
      restoreKeys: |
        maven | "$(Agent.OS)"

  - task: Maven@4
    displayName: 'Maven clean test (selenium-soc)'
    inputs:
      mavenPomFile: '$(socPom)'
      goals: 'clean test'
      options: >-
        -Denv=local -Dbrowser=chrome -Dheadless=true
        -Dmaven.repo.local=$(mavenCache)
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.17'
      mavenOptions: '-Xmx1024m'

  # Discover where reports landed and set variables for conditional artifact publish
  - script: |
      echo "Looking for test reports..."
      find "$(Build.SourcesDirectory)" -type d \( -name "surefire-reports" -o -name "failsafe-reports" \) -print || true
      find "$(Build.SourcesDirectory)" -type f \( -name "TEST-*.xml" -o -name "testng-results.xml" \) -print || true

      # Set vars for artifact steps
      if compgen -G "$(Build.SourcesDirectory)/selenium-soc/target/surefire-reports/TEST-*.xml" > /dev/null; then
        echo "Found surefire XMLs"
        echo "##vso[task.setvariable variable=hasSurefire]true"
      else
        echo "No surefire XMLs"
        echo "##vso[task.setvariable variable=hasSurefire]false"
      fi

      if compgen -G "$(Build.SourcesDirectory)/selenium-soc/target/failsafe-reports/TEST-*.xml" > /dev/null; then
        echo "Found failsafe XMLs"
        echo "##vso[task.setvariable variable=hasFailsafe]true"
      else
        echo "No failsafe XMLs"
        echo "##vso[task.setvariable variable=hasFailsafe]false"
      fi

      if [ -f "$(Build.SourcesDirectory)/selenium-soc/target/site/jacoco/jacoco.xml" ]; then
        echo "Found JaCoCo report"
        echo "##vso[task.setvariable variable=hasJacoco]true"
      else
        echo "No JaCoCo report"
        echo "##vso[task.setvariable variable=hasJacoco]false"
      fi
    displayName: "Locate reports & set variables"
    condition: always()

  # Publish results to the Tests tab (JUnit/TestNG)
  - task: PublishTestResults@2
    displayName: 'Publish JUnit/TestNG results'
    condition: always()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: |
        **/surefire-reports/TEST-*.xml
        **/failsafe-reports/TEST-*.xml
        **/testng-results.xml
      searchFolder: '$(System.DefaultWorkingDirectory)'
      mergeTestResults: true
      failTaskOnFailedTests: false
      testRunTitle: 'selenium-soc • $(Build.SourceBranchName) • #$(Build.BuildNumber)'

  # Upload raw report folders only if we actually found them
  - task: PublishBuildArtifacts@1
    displayName: 'Attach surefire reports'
    condition: and(always(), eq(variables.hasSurefire, 'true'))
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/selenium-soc/target/surefire-reports'
      ArtifactName: 'surefire-reports'
      publishLocation: 'Container'

  - task: PublishBuildArtifacts@1
    displayName: 'Attach failsafe reports'
    condition: and(always(), eq(variables.hasFailsafe, 'true'))
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/selenium-soc/target/failsafe-reports'
      ArtifactName: 'failsafe-reports'
      publishLocation: 'Container'

  # Optional coverage, only if the XML exists
  - task: PublishCodeCoverageResults@2
    displayName: 'Publish JaCoCo coverage'
    condition: and(always(), eq(variables.hasJacoco, 'true'))
    inputs:
      codeCoverageTool: 'JaCoCo'
      summaryFileLocation: '$(Build.SourcesDirectory)/selenium-soc/target/site/jacoco/jacoco.xml'
      reportDirectory: '$(Build.SourcesDirectory)/selenium-soc/target/site/jacoco'
