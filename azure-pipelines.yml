trigger:
  branches: { include: [ master ] }
  paths:    { include: [ selenium-soc/** ] }

pool:
  vmImage: 'ubuntu-latest'

variables:
  mavenCache: '$(Pipeline.Workspace)/.m2'
  socPom: '$(Build.SourcesDirectory)/selenium-soc/pom.xml'

steps:
  - checkout: self

  - script: |
      echo "Sources dir: $(Build.SourcesDirectory)"
      ls -la $(Build.SourcesDirectory)/selenium-soc || true
      test -f "$(socPom)" && echo "POM found: $(socPom)" || (echo "POM NOT FOUND" && exit 1)
    displayName: "Verify repository layout"

  - task: Cache@2
    displayName: 'Cache Maven repo'
    inputs:
      key: 'maven | "$(Agent.OS)" | **/pom.xml'
      path: '$(mavenCache)'
      restoreKeys: |
        maven | "$(Agent.OS)"

  - task: Maven@4
    displayName: 'Maven clean test (selenium-soc)'
    inputs:
      mavenPomFile: '$(socPom)'
      goals: 'clean test'
      options: >-
        -Denv=local -Dbrowser=chrome -Dheadless=true
        -Dmaven.repo.local=$(mavenCache)
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'   # JUnit files (Surefire/Failsafe handled below)
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.17'
      mavenOptions: '-Xmx1024m'

  # Show exactly where reports went
  - script: |
      echo "Looking for test reports..."
      find "$(Build.SourcesDirectory)" -type d \( -name "surefire-reports" -o -name "failsafe-reports" \) -print
      find "$(Build.SourcesDirectory)" -type f \( -name "TEST-*.xml" -o -name "testng-results.xml" \) -print
    displayName: "Locate test report files"
    condition: always()

  # Publish to the Tests tab (works for Surefire, Failsafe, and TestNG XML)
  - task: PublishTestResults@2
    displayName: 'Publish JUnit/TestNG results'
    condition: always()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: |
        **/surefire-reports/TEST-*.xml
        **/failsafe-reports/TEST-*.xml
        **/testng-results.xml
      searchFolder: '$(System.DefaultWorkingDirectory)'
      mergeTestResults: true
      failTaskOnFailedTests: false
      testRunTitle: 'selenium-soc • $(Build.SourceBranchName) • #$(Build.BuildNumber)'

  # Upload raw report folders only if they exist
  - task: PublishBuildArtifacts@1
    displayName: 'Attach surefire reports (if present)'
    condition: and(always(), exists('$(Build.SourcesDirectory)/selenium-soc/target/surefire-reports'))
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/selenium-soc/target/surefire-reports'
      ArtifactName: 'surefire-reports'
      publishLocation: 'Container'

  - task: PublishBuildArtifacts@1
    displayName: 'Attach failsafe reports (if present)'
    condition: and(always(), exists('$(Build.SourcesDirectory)/selenium-soc/target/failsafe-reports'))
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/selenium-soc/target/failsafe-reports'
      ArtifactName: 'failsafe-reports'
      publishLocation: 'Container'

  # Optional: publish screenshots/logs if your framework writes them
  - task: PublishBuildArtifacts@1
    displayName: 'Attach Selenium artifacts (if present)'
    condition: and(always(), exists('$(Build.SourcesDirectory)/selenium-soc/target/screenshots'))
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/selenium-soc/target/screenshots'
      ArtifactName: 'selenium-artifacts'
      publishLocation: 'Container'

  # Optional: JaCoCo coverage (guarded so it won’t fail if missing)
  - task: PublishCodeCoverageResults@2
    displayName: 'Publish JaCoCo coverage (if present)'
    condition: and(always(), exists('$(Build.SourcesDirectory)/selenium-soc/target/site/jacoco/jacoco.xml'))
    inputs:
      codeCoverageTool: 'JaCoCo'
      summaryFileLocation: '$(Build.SourcesDirectory)/selenium-soc/target/site/jacoco/jacoco.xml'
      reportDirectory: '$(Build.SourcesDirectory)/selenium-soc/target/site/jacoco'
